// Semantic is better than a ton of useless classes, keep it simple

// CLEARFIX
@mixin clearfix {
	&:before,
	&:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}

//VISUALLY HIDE (a11y)
@mixin visually-hidden {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}

.is-visually-hidden {
	@include visually-hidden;
}

// RESPONSIVE BREAKPOINTS
// From the pretty brilliant article - https://medium.freecodecamp.com/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862
//
// REMEMBER: SASS will gather the rules together for you.
// Need defaults? 600, 900, 1200, 1800

@mixin break-under($breakpoint) {
	@media (max-width: $breakpoint) {
		@content;
	}
}

@mixin break-over($breakpoint) {
	@media (min-width: $breakpoint) {
		@content;
	}
}

@mixin for-phone-only {
	@media (max-width: 599px) {
		@content;
	}
}

// RESPONSIVE FONT SIZES
///
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Viewport-based size
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px)
///                                  (optional)
/// @param {Number}   $fallback    - Fallback for viewport-
///                                  based units (optional)
///
/// @example scss - 5vw font size (with 50px fallback),
///                 minumum of 35px and maximum of 150px
///  @include responsive-font(5vw, 35px, 150px, 50px);
///
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
	$responsive-unitless: $responsive / ($responsive - $responsive + 1);
	$dimension: if(unit($responsive) == "vh", "height", "width");
	$min-breakpoint: $min / $responsive-unitless * 100;

	@media (max-#{$dimension}: #{$min-breakpoint}) {
		font-size: $min;
	}

	@if $max {
		$max-breakpoint: $max / $responsive-unitless * 100;

		@media (min-#{$dimension}: #{$max-breakpoint}) {
			font-size: $max;
		}
	}

	@if $fallback {
		font-size: $fallback;
	}

	font-size: $responsive;
}

// not sure if that button should be white or black text? YAY MATH!

@function contrasting-text-color($color) {
	@if (lightness($color) > 50) {
		@return #000000; // Lighter backgorund, return dark color
	} @else {
		@return #ffffff; // Darker background, return light color
	}
}

@mixin arrow($direction: down, $size: 5px, $color: #555) {
	width: 0;
	height: 0;
	@if ($direction == left) {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
	} @else if ($direction == right) {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
	} @else if ($direction == down) {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
	} @else {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
	}
}

@function map-deep-get($map, $keys...) {
	@each $key in $keys {
		$map: map-get($map, $key);
	}
	@return $map;
}
